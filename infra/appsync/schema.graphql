# Directives for authorization
directive @aws_auth(
  cognito_groups: [String]
) on FIELD_DEFINITION

directive @aws_iam on FIELD_DEFINITION

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Allow both Cognito users and IAM
  getEntities(Num: Int, NextToken: String): EntityConnection
    @aws_auth
    @aws_iam

  # Group queries
  getGroups(EntityID: String!, Num: Int, NextToken: String): GroupConnection
    @aws_auth
    @aws_iam

  getSessions(EntityID: String!, GroupID: String!, Num: Int, NextToken: String): SessionConnection
    @aws_auth
    @aws_iam

  # Public queries
  getSite(domain: String!): Site
  getPostsForSite(domain: String!, num: Int, after: String): PostConnection
}

type Mutation {
  # Only allow IAM (server-side) for entity operations
  createEntity(input: CreateEntityInput): Entity
    @aws_iam 
    @aws_auth

  createGroup(input: CreateGroupInput): Group
    @aws_iam
    @aws_auth

  # Allow both authenticated users and IAM
  startPageTransition(page: String!): String!
    @aws_auth
    @aws_iam
  
  createSite(input: CreateSiteInput): Site
    @aws_auth
    @aws_iam
  
  createPost(input: CreatePostInput): Post
    @aws_auth
    @aws_iam
  
  createComment(input: CreateCommentInput): Comment
    @aws_auth
    @aws_iam
}

type Subscription {
	onPageTransition: String
		@aws_subscribe(mutations: ["startPageTransition"])
}

# Entity
type Entity {
  EntityID: String! @aws_iam @aws_auth
  EntityName: String! @aws_iam @aws_auth
  Created: String! @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  Modified: String! @aws_iam @aws_auth
  ModifiedBy: String! @aws_iam @aws_auth
}

type EntityConnection {
  NextToken: String @aws_iam @aws_auth
  Entities: [Entity] @aws_iam @aws_auth
}

input CreateEntityInput {
  EntityName: String @aws_iam @aws_auth
}

# ~Entity

# Group
type Group {
  EntityID: String! @aws_iam @aws_auth
  GroupID: String! @aws_iam @aws_auth
  GroupName: String! @aws_iam @aws_auth
  Description: String @aws_iam @aws_auth
  Created: AWSDateTime! @aws_iam @aws_auth
  Modified: AWSDateTime @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  ModifiedBy: String @aws_iam @aws_auth
}

type GroupConnection {
  NextToken: String @aws_iam @aws_auth
  Groups: [Group] @aws_iam @aws_auth
}

input CreateGroupInput {
  EntityID: String! @aws_iam @aws_auth
  GroupName: String! @aws_iam @aws_auth
  Description: String @aws_iam @aws_auth
}

# ~Group

# Session
type Session {
  EntityID: String! @aws_iam @aws_auth
  GroupID: String! @aws_iam @aws_auth
  SessionID: String! @aws_iam @aws_auth
  SessionName: String! @aws_iam @aws_auth
  SessionDescription: String @aws_iam @aws_auth
  Created: AWSDateTime! @aws_iam @aws_auth
  Modified: AWSDateTime @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  ModifiedBy: String @aws_iam @aws_auth
}

type SessionConnection {
  NextToken: String @aws_iam @aws_auth
  Sessions: [Session] @aws_iam @aws_auth
}

# ~Session

type Site {
  id: ID! 
  name: String!
  domain: String!
  posts: PostConnection!
}

type PostConnection {
  cursor: String
  posts: [Post]
}

type Post {
  id: ID!
  title: String!
  publishDate: AWSDateTime!
  content: String!
  comments(num: Int, after: String): CommentConnection!
}

type CommentConnection {
  cursor: String
  comments: [Comment]
}

type Comment {
  id: ID!
  username: String!
  content: String!
  publishDate: AWSDateTime!
}

input CreateSiteInput {
  name: String
  domain: String!
}

input CreatePostInput {
  domain: String!
  title: String!
  publishDate: AWSDateTime
  content: String!
}

input CreateCommentInput {
  postId: String!
  username: String!
  publishDate: AWSDateTime
  content: String!
}
