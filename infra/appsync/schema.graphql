# Directives for authorization
directive @aws_auth(
  cognito_groups: [String]
) on FIELD_DEFINITION

directive @aws_iam on FIELD_DEFINITION

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Allow both Cognito users and IAM
  getEntities(Num: Int, NextToken: String): EntityConnection
    @aws_auth
    @aws_iam

  # Group queries
  getGroups(EntityID: String!, Num: Int, NextToken: String): GroupConnection
    @aws_auth
    @aws_iam

  getSessions(GroupID: String!, Num: Int, NextToken: String): SessionConnection
    @aws_auth
    @aws_iam

}

type Mutation {
  createEntity(input: CreateEntityInput!): Entity
    @aws_iam 
    @aws_auth

  updateEntity(input: UpdateEntityInput!): Entity
    @aws_iam 
    @aws_auth

  createGroup(input: CreateGroupInput!): Group
    @aws_iam
    @aws_auth

  updateGroup(input: UpdateGroupInput!): Group
    @aws_iam
    @aws_auth

  createSession(input: CreateSessionInput!): Session
    @aws_iam
    @aws_auth
  
  # Allow both authenticated users and IAM
  startPageTransition(page: String!): String!
    @aws_auth
    @aws_iam
  
}

type Subscription {
	onPageTransition: String
		@aws_subscribe(mutations: ["startPageTransition"])
}

# Entity
type Entity {
  EntityID: String! @aws_iam @aws_auth
  EntityName: String! @aws_iam @aws_auth
  Created: AWSDateTime! @aws_iam @aws_auth
  Modified: AWSDateTime! @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  ModifiedBy: String! @aws_iam @aws_auth
  Status: String! @aws_iam @aws_auth
}

type EntityConnection {
  NextToken: String @aws_iam @aws_auth
  Entities: [Entity] @aws_iam @aws_auth
}

input CreateEntityInput {
  EntityName: String!
}

input UpdateEntityInput {
  EntityID: String!
  EntityName: String
  Status: String
}

# ~Entity

# Group
type Group {
  EntityID: String! @aws_iam @aws_auth
  GroupID: String! @aws_iam @aws_auth
  GroupName: String! @aws_iam @aws_auth
  Description: String @aws_iam @aws_auth
  Created: AWSDateTime! @aws_iam @aws_auth
  Modified: AWSDateTime! @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  ModifiedBy: String! @aws_iam @aws_auth
  Status: String! @aws_iam @aws_auth
}

type GroupConnection {
  NextToken: String @aws_iam @aws_auth
  Groups: [Group] @aws_iam @aws_auth
}

input CreateGroupInput {
  EntityID: String!
  GroupName: String!
  Description: String
}

input UpdateGroupInput {
  EntityID: String!
  GroupID: String!
  GroupName: String
  Description: String
  Status: String
}

# ~Group

# Session
type Session {
  EntityID: String! @aws_iam @aws_auth
  GroupID: String! @aws_iam @aws_auth
  SessionID: String! @aws_iam @aws_auth
  SessionName: String! @aws_iam @aws_auth
  SessionDescription: String @aws_iam @aws_auth
  Created: AWSDateTime! @aws_iam @aws_auth
  Modified: AWSDateTime! @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  ModifiedBy: String! @aws_iam @aws_auth
  Status: String! @aws_iam @aws_auth
}

type SessionConnection {
  NextToken: String
  Sessions: [Session]
}

input CreateSessionInput {
  EntityID: String!
  GroupID: String!
  SessionName: String!
  SessionDescription: String
}

# ~Session
