# Directives for authorization
directive @aws_auth(
  cognito_groups: [String]
) on FIELD_DEFINITION

directive @aws_iam on FIELD_DEFINITION

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Allow both Cognito users and IAM
  getEntities(Num: Int, NextToken: String): EntityConnection
    @aws_auth
    @aws_iam

  # Group queries
  getGroups(EntityID: String!, Num: Int, NextToken: String): GroupConnection
    @aws_auth
    @aws_iam

  getSessions(GroupID: String!, Num: Int, NextToken: String): SessionConnection
    @aws_iam
    @aws_auth

  getQuestions(GroupID: String!, SessionID: String!, Num: Int, NextToken: String): QuestionConnection
    @aws_auth
    @aws_iam

  getAnsOptions(GroupID: String!, SessionID: String!, QuestionID: String!, Num: Int, NextToken: String): AnsOptionConnection
    @aws_auth
    @aws_iam

  getUsers(Num: Int, NextToken: String): UserConnection
    @aws_auth
    @aws_iam

  getPartis(GroupID: String!, Num: Int, NextToken: String): PartiConnection
    @aws_auth
    @aws_iam

  getResponseLogs(
    GroupID: String!
    Email: String
    SessionID: String
    QuestionID: String
    Num: Int
    NextToken: String
  ): ResponseLogConnection @aws_auth @aws_iam

  getSessionScores(
    GroupID: String!
    Email: String
    SessionID: String
    Num: Int
    NextToken: String
  ): SessionScoreConnection @aws_auth @aws_iam
}

type Mutation {
  createEntity(input: CreateEntityInput!): Entity
    @aws_iam 
    @aws_auth

  updateEntity(input: UpdateEntityInput!): Entity
    @aws_iam 
    @aws_auth

  createGroup(input: CreateGroupInput!): Group
    @aws_iam
    @aws_auth

  updateGroup(input: UpdateGroupInput!): Group
    @aws_iam
    @aws_auth

  createSession(input: CreateSessionInput!): Session
    @aws_iam
    @aws_auth

  updateSession(input: UpdateSessionInput!): Session
    @aws_iam
    @aws_auth
  
  startPageTransition(page: String!): String!
    @aws_auth
    @aws_iam
  
  createQuestion(input: CreateQuestionInput!): Question
    @aws_iam
    @aws_auth

  updateQuestion(input: UpdateQuestionInput!): Question
    @aws_iam
    @aws_auth
  
  createAnsOption(input: CreateAnsOptionInput!): AnsOption
    @aws_iam
    @aws_auth

  updateAnsOption(input: UpdateAnsOptionInput!): AnsOption
    @aws_iam
    @aws_auth

  createUser(input: CreateUserInput!): User @aws_auth @aws_iam

  updateUser(input: UpdateUserInput!): User @aws_auth @aws_iam

  loginUser(Email: String!): User @aws_auth @aws_iam

  createParti(input: CreatePartiInput!): Parti @aws_auth @aws_iam

  updateParti(input: UpdatePartiInput!): Parti @aws_auth @aws_iam

  createResponseLog(input: CreateResponseLogInput!): ResponseLog @aws_auth @aws_iam

  updateResponseLog(input: UpdateResponseLogInput!): ResponseLog @aws_auth @aws_iam

  createSessionScore(input: CreateSessionScoreInput!): SessionScore @aws_auth @aws_iam

  updateSessionScore(input: UpdateSessionScoreInput!): SessionScore @aws_auth @aws_iam
}

type Subscription {
	onPageTransition: String
		@aws_subscribe(mutations: ["startPageTransition"])
}

# Entity
type Entity {
  EntityID: String! @aws_iam @aws_auth
  EntityName: String! @aws_iam @aws_auth
  Created: AWSDateTime! @aws_iam @aws_auth
  Modified: AWSDateTime! @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  ModifiedBy: String! @aws_iam @aws_auth
  Status: String! @aws_iam @aws_auth
}

type EntityConnection {
  NextToken: String @aws_iam @aws_auth
  Entities: [Entity] @aws_iam @aws_auth
}

input CreateEntityInput {
  EntityName: String!
}

input UpdateEntityInput {
  EntityID: String!
  EntityName: String
  Status: String
}

# ~Entity

# Group
type Group {
  EntityID: String! @aws_iam @aws_auth
  GroupID: String! @aws_iam @aws_auth
  GroupName: String! @aws_iam @aws_auth
  Description: String @aws_iam @aws_auth
  Created: AWSDateTime! @aws_iam @aws_auth
  Modified: AWSDateTime! @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  ModifiedBy: String! @aws_iam @aws_auth
  Status: String! @aws_iam @aws_auth
}

type GroupConnection {
  NextToken: String @aws_iam @aws_auth
  Groups: [Group] @aws_iam @aws_auth
}

input CreateGroupInput {
  EntityID: String!
  GroupName: String!
  Description: String
}

input UpdateGroupInput {
  EntityID: String!
  GroupID: String!
  GroupName: String
  Description: String
  Status: String
}

# ~Group

# Session
type Session {
  EntityID: String! @aws_iam @aws_auth
  GroupID: String! @aws_iam @aws_auth
  SessionID: String! @aws_iam @aws_auth
  SessionName: String! @aws_iam @aws_auth
  SessionDescription: String @aws_iam @aws_auth
  Created: AWSDateTime! @aws_iam @aws_auth
  Modified: AWSDateTime! @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  ModifiedBy: String! @aws_iam @aws_auth
  Status: String! @aws_iam @aws_auth
}

type SessionConnection {
  NextToken: String
  Sessions: [Session]
}

input CreateSessionInput {
  EntityID: String!
  GroupID: String!
  SessionName: String!
  SessionDescription: String
}

input UpdateSessionInput {
  EntityID: String!
  GroupID: String!
  SessionID: String!
  SessionName: String
  SessionDescription: String
  Status: String
}

# ~Session

# Question
type Question {
  EntityID: String! @aws_iam @aws_auth
  QuestionID: String! @aws_iam @aws_auth
  SessionID: String! @aws_iam @aws_auth
  GroupID: String! @aws_iam @aws_auth
  Question: String! @aws_iam @aws_auth
  Remark: String @aws_iam @aws_auth
  Duration: Int! @aws_iam @aws_auth
  Order: Int! @aws_iam @aws_auth
  Created: AWSDateTime! @aws_iam @aws_auth
  Modified: AWSDateTime! @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  ModifiedBy: String! @aws_iam @aws_auth
  Status: String! @aws_iam @aws_auth
}

type QuestionConnection {
  NextToken: String @aws_iam @aws_auth
  Questions: [Question] @aws_iam @aws_auth
}

input CreateQuestionInput {
  EntityID: String!
  GroupID: String!
  SessionID: String!
  Question: String!
  Remark: String
  Duration: Int!
  Order: Int!
}

input UpdateQuestionInput {
  GroupID: String!
  SessionID: String!
  QuestionID: String!
  Question: String
  Remark: String
  Duration: Int
  Order: Int
  Status: String
}

# ~Question

# AnsOption
type AnsOption {
  EntityID: String! @aws_iam @aws_auth
  AnsOptionID: String! @aws_iam @aws_auth
  QuestionID: String! @aws_iam @aws_auth
  SessionID: String! @aws_iam @aws_auth
  GroupID: String! @aws_iam @aws_auth
  AnsOption: String! @aws_iam @aws_auth
  Correct: String! @aws_iam @aws_auth
  Remark: String @aws_iam @aws_auth
  Created: AWSDateTime! @aws_iam @aws_auth
  Modified: AWSDateTime! @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  ModifiedBy: String! @aws_iam @aws_auth
  Status: String! @aws_iam @aws_auth
}

type AnsOptionConnection {
  NextToken: String @aws_iam @aws_auth
  AnsOptions: [AnsOption] @aws_iam @aws_auth
}

input CreateAnsOptionInput {
  EntityID: String!
  GroupID: String!
  SessionID: String!
  QuestionID: String!
  AnsOption: String!
  Correct: String!
  Remark: String
}

input UpdateAnsOptionInput {
  GroupID: String!
  SessionID: String!
  QuestionID: String!
  AnsOptionID: String!
  AnsOption: String
  Correct: String
  Remark: String
  Status: String
}

# ~AnsOption

# User
type User {
  Name: String! @aws_iam @aws_auth
  Email: String! @aws_iam @aws_auth
  LoginDT: AWSDateTime! @aws_iam @aws_auth
  Created: AWSDateTime! @aws_iam @aws_auth
  Modified: AWSDateTime! @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  ModifiedBy: String! @aws_iam @aws_auth
  Status: String! @aws_iam @aws_auth
}

type UserConnection {
  NextToken: String @aws_iam @aws_auth
  Users: [User] @aws_iam @aws_auth
}

input CreateUserInput {
  Name: String!
  Email: String!
  LoginDT: AWSDateTime!
}

input UpdateUserInput {
  Email: String!
  Name: String
  Status: String
}

# ~User

# Parti
type Parti {
  EntityID: String! @aws_iam @aws_auth
  GroupID: String! @aws_iam @aws_auth
  Email: String! @aws_iam @aws_auth
  RegisterDT: AWSDateTime! @aws_iam @aws_auth
  LoginDT: AWSDateTime! @aws_iam @aws_auth
  Created: AWSDateTime! @aws_iam @aws_auth
  Modified: AWSDateTime! @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  ModifiedBy: String! @aws_iam @aws_auth
  Status: String! @aws_iam @aws_auth
}

type PartiConnection {
  NextToken: String @aws_iam @aws_auth
  Partis: [Parti] @aws_iam @aws_auth
}

input CreatePartiInput {
  EntityID: String!
  GroupID: String!
  Email: String!
}

input UpdatePartiInput {
  GroupID: String!
  Email: String!
  Status: String
}

# ~Parti

# ResponseLog
type ResponseLog {
  EntityID: String! @aws_iam @aws_auth
  Email: String! @aws_iam @aws_auth
  GroupID: String! @aws_iam @aws_auth
  SessionID: String! @aws_iam @aws_auth
  QuestionID: String! @aws_iam @aws_auth
  ResponseTime: Int! @aws_iam @aws_auth
  CorrectPercent: Int! @aws_iam @aws_auth
  Score: Int! @aws_iam @aws_auth
  ScoreMax: Int! @aws_iam @aws_auth
  Created: AWSDateTime! @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  QARecord: AWSJSON! @aws_iam @aws_auth
}

type ResponseLogConnection {
  NextToken: String @aws_iam @aws_auth
  ResponseLogs: [ResponseLog] @aws_iam @aws_auth
}

input CreateResponseLogInput {
  EntityID: String!
  Email: String!
  GroupID: String!
  SessionID: String!
  QuestionID: String!
  ResponseTime: Int!
  CorrectPercent: Int!
  Score: Int!
  ScoreMax: Int!
  QARecord: AWSJSON!
}

input UpdateResponseLogInput {
  GroupID: String!
  Email: String!
  SessionID: String!
  QuestionID: String!
  ResponseTime: Int
  CorrectPercent: Int
  Score: Int
  ScoreMax: Int
  QARecord: AWSJSON
}

# ~ResponseLog

# SessionScore
type SessionScore {
  EntityID: String! @aws_iam @aws_auth
  Email: String! @aws_iam @aws_auth
  GroupID: String! @aws_iam @aws_auth
  SessionID: String! @aws_iam @aws_auth
  Score: Int! @aws_iam @aws_auth
  Created: AWSDateTime! @aws_iam @aws_auth
  Modified: AWSDateTime! @aws_iam @aws_auth
  CreatedBy: String! @aws_iam @aws_auth
  ModifiedBy: String! @aws_iam @aws_auth
}

type SessionScoreConnection {
  NextToken: String @aws_iam @aws_auth
  SessionScores: [SessionScore] @aws_iam @aws_auth
}

input CreateSessionScoreInput {
  EntityID: String!
  Email: String!
  GroupID: String!
  SessionID: String!
  Score: Int!
}

input UpdateSessionScoreInput {
  GroupID: String!
  Email: String!
  SessionID: String!
  Score: Int
}

# ~SessionScore
